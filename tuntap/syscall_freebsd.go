// +build freebsd

/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: FTwOoO <booobooob@gmail.com>
 *
 * C implementation: https://github.com/ambrop72/badvpn/blob/master/tuntap/BTap.c
 *
 */

package tuntap

import (
	"fmt"
	"os"
	"syscall"
	"unsafe"
	"strings"
	"errors"
)

const (

	TAPGIFNAME = 0x4020745d
	/*
	# TAPGIFNAME can be generated by this little C program,
	# but here 0x4020745d is generated under macOS, not freebsd,
	# i dont known if they are the same.
	#
	# Source code: freebsd/sys/net/if_tap.h
	#


	#include <stdio.h>

	#include <fcntl.h>
	#include <unistd.h>
	#include <errno.h>
	#include <sys/ioctl.h>
	#include <sys/types.h>
	#include <sys/stat.h>
	#include <sys/socket.h>
	#include <net/if.h>
	#include <net/if_arp.h>

	#define	TAPGIFNAME _IOR('t', 93, struct ifreq)

	int main(int argc, const char * argv[]) {
		printf("TAPGIFNAME=0x%x\n",TAPGIFNAME);
		return 0;
	}
	*/
	IFNAMSIZ = 16
)

type ifReq struct {
	Name  [IFNAMSIZ]byte
	Flags uint16
	pad   [0x20 - IFNAMSIZ - 2]byte
}


func newTAP(ifName string) (ifce *Interface, err error) {
	if !checkTapName(ifName) {
		return nil, fmt.Errorf("Error name:%s", ifName)
	}

	file, err := os.OpenFile("/dev/" + ifName, os.O_RDWR, 0)
	if err != nil {
		return nil, err
	}
	var req ifReq
	_, _, errno := syscall.Syscall(syscall.SYS_IOCTL, file.Fd(), uintptr(TAPGIFNAME), uintptr(unsafe.Pointer(&req)))
	if errno != 0 {
		err = fmt.Errorf("ioctl: %v", errno)
		return
	}
	createdIFName := strings.Trim(string(req.Name[:]), "\x00")

	ifce = &Interface{isTAP: true,
		ReadWriteCloser: file,
		name: createdIFName,
	}
	return
}

func newTUN(ifName string) (ifce *Interface, err error) {
	return nil, errors.New("TUN not supported on FreeBSD")
}

