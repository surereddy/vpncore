#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# apnic-extended reference: http://ftp.apnic.net/apnic/stats/apnic/README-EXTENDED.TXT
#

import os.path
import tempfile
import urllib.request

import sys

DATA_FILE_URL = "http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-extended-latest"
target_file = os.path.abspath("net/geoip/geodata.go")

def parse_apnic_extended_file(f_in, f_out, onlyIPv4=True):
    f_out.write(
        '''
// Generated by geodata-gen.py


package geoip
import (
    "github.com/FTwOoO/vpncore/net/addr"
    "net"
)

func GeoIpQuery(ip string) string {
    return GeoIPData.Get(net.ParseIP(ip).To4()).Info.(string)
}

func createIPRange(startIp string, count uint32, country string) *addr.IPRange {
    return addr.NewIPRangeByStartIp(net.ParseIP(startIp), count).UpdateInfo(country)
}

var GeoIPData = addr.IPRanges{
''')


    for line in f_in:
        arr = line.split("|")
        if arr[0] != 'apnic' or arr[-1].strip() == 'summary':
            continue

        if len(arr) < 7:
            continue


        country = arr[1]
        type = arr[2]
        startIp = arr[3]
        count = int(arr[4])
        status = arr[6]


        if type in ['ipv4', 'ipv6'] and status in ['available', 'allocated', 'assigned', 'reserved']:
            if status not in ['allocated', 'assigned']:
                continue

            if country.strip() == "":
                continue

            if onlyIPv4 and type != 'ipv4':
                continue

            f_out.write('''\tcreateIPRange("%s", %d, "%s"),\n ''' % (startIp, count, country))

    f_out.write("}")

if __name__ == '__main__':


    with open(target_file, 'w') as f_out:
        try:
            req = urllib.request.urlopen(DATA_FILE_URL)
        except:
            print("Get data file fail from %s" % DATA_FILE_URL)
            sys.exit(1)

        f_in = tempfile.TemporaryFile("w+")
        f_in.write(req.read().decode('utf-8'))
        f_in.seek(0)

        parse_apnic_extended_file(f_in, f_out)